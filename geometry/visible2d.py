"""
visible2d - Python script to demonstrate visible facets of convex hulls in the Euclidean plane.
===============================================================================================

Data is generated by selecting the testcase below.  Edit the data
generation parameters for different situations.  Plot elements are
selected by using the mouse and keyboard With the focus in the plot
window, pressing "n" will highlight the next generator point and
pressing the left arrow will highlight a facet.  The endpoints of the
facet will be in red.  If the facet is highlighted in red, it is not
visible from the origin.  If it is highlighted in green it is visible
from the origin.

If testcase==1, the points are drawn on a circle, but with the points
randomly moved from the true circle.  Edit the file (there is no gui
for parameter entry) to change the generated data.  

If testcase==2 the
data is read from the qhull file specified in the code.  Edit the
source code to change the file name.

There is an option to rotate the point list and then move it from the
origin.  Edit the variables "rtheta" and "offset".

This script was built to facilitate my understanding of qhull and the
python interface (and to test the modifications to
scipy.spatial.ConvexHull).  It produces a lot of output.  When the
script is started it prints the points generated by the "testcase",
appends the origin and prints the extended points ("epoints").  With
the focus in the plot window, pressing "n" will cycle through the
input points, printing the site number and location to the standard
output.  Pressing the left arrow will highlight a facet of the convex
hull and print the simplex and sites corresponding the the simplex on
the standard output.  See the documentation for
scipy.spatial.ConvexHull for details).

"""
#
# Copyright (C)  Robert T. Short, 2019.
#
# Distributed under the same BSD license as Scipy.
#

import sys

import numpy
from numpy import pi, sin, cos

from scipy.spatial import ConvexHull, Delaunay
from pybob.spatial.plotutils import convex_hull_plot_2d

from pybob.spatial.qhullfile import readQhullFile

import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection

class Plots:

    def __init__(self, hull):

        self.hull = hull

        self.point   = 0
        self.simplex = 0

        self.lines   = []
        self.scatter = []

        self.fig1 = plt.figure('Convex Hull')
        self.ax1  = self.fig1.add_subplot(111)
        self.fig1.canvas.mpl_connect('key_press_event', self.press)
        
        self.ax1.scatter(hull.points[0:-1,0], hull.points[0:-1:,1], marker='o', color='green')
        line_segments = [hull.points[simplex] for simplex in hull.simplices]
        self.ax1.add_collection(LineCollection(line_segments,
                                               colors='k',
                                               linestyle='solid',
                                               alpha=0.5))
        vpoint = self.hull.points[-1]
        mx = 0.1*numpy.round(numpy.max(hull.points)/0.1)+0.1
        mn = 0.1*numpy.round(numpy.min(hull.points)/0.1)-0.1
        self.ax1.scatter(vpoint[0],vpoint[1],color='black',marker='x')
        self.ax1.set_xlim([mn,mx])
        self.ax1.set_ylim([mn,mx])

        self.ax1.set_aspect('equal')
        self.fig1.show()


    def clearGraphics(self):
        for line in self.scatter:
            line.remove()
        for line in self.lines:
            for ln in line:
                ln.remove()
        self.lines   = []
        self.scatter = []
        self.fig1.canvas.draw()
        
    def press(self, event):

        # Quit.
        if (event.key=='q'):
            sys.exit(1)
        # Cycle through the generator points.
        if (event.key=='c'):
            self.clearGraphics()
        if (event.key=='n'):
            self.clearGraphics()
            print('Input site', self.point, self.hull.points[self.point])
            self.scatter.append(self.ax1.scatter(self.hull.points[self.point,0],
                                                 self.hull.points[self.point,1],
                                                 color='red', marker='.'                    ))
            self.fig1.canvas.draw()
            self.point = numpy.mod(self.point+1, len(self.hull.points))
        # Cycle through the hull simplices
        if (event.key=='left'):
            self.clearGraphics()
            simplex = self.hull.points[self.hull.simplices[self.simplex]]
            print('Simplex:', self.hull.simplices[self.simplex])
            print(simplex)
            if(self.hull.good[self.simplex]):
                color='green'
            else:
                color='red'
            self.scatter.append(self.ax1.scatter(simplex[:,0],simplex[:,1],color='red'))
            self.lines.append(self.ax1.plot(simplex[:,0],simplex[:,1],color=color))
            self.fig1.canvas.draw()
            self.simplex = numpy.mod(self.simplex+1, len(self.hull.simplices))

if __name__ == "__main__":

    testcase = 1

    if testcase==1:
        #  testcase 1: Generate "npoints" that lie on a circle with center "center" and
        #  radius "radius", but randomly move the points uniformly distributed by
        #  "jitter".  If "include_center" is true, include the center in the point list.
        npoints        = 6
        include_center = True
        jitter         = 0.25
        center         = numpy.array([0,0])
        radius         = 1
        theta          = numpy.linspace(0,2*pi,npoints+1)[0:-1]
        x              = radius*cos(theta) + center[0]
        y              = radius*sin(theta) + center[1]
        if (include_center):
            x  = numpy.append(x,center[0])  # These two lines include the center
            y  = numpy.append(y,center[1])  # in the generator list.
        xs   = x + numpy.random.uniform(-jitter,jitter,x.shape)
        ys   = y + numpy.random.uniform(-jitter,jitter,x.shape)
        points = numpy.vstack((xs,ys)).T
        npoints, ndim = points.shape
    elif (testcase==2):
        #  testcase 2: Read the qhull file "filename".
        filename = 'qhulldata/visible1'
        ndim, points = readQhullFile(filename)
        npoints = points.shape[0]

    rtheta = 00*pi/180;
    rotmat = numpy.array([[cos(rtheta),sin(rtheta)],[-sin(rtheta),cos(rtheta)]])
    points = numpy.dot(points, rotmat)
    offset = numpy.array([2.0,2.0])
    points = points + offset
    
    npoints = len(points)
    vpoint  = numpy.array([0.0,0.0])
    epoints = numpy.vstack((points,vpoint))
    
    hull  = ConvexHull(points)
    qhull_options = 'QG'+str(npoints)
    print('qhull_options: ', qhull_options)
    ehull = ConvexHull(epoints, qhull_options=qhull_options)

    print('points\n', points)
    print('simplices\n',  hull.simplices)
    print('good\n',    hull.good)
    print('epoints\n', epoints)
    print('esimplices\n', ehull.simplices)
    print('good\n',    ehull.good)

    plots = Plots(ehull)

    print()
    print('With focus in Convex Hull window')
    print('  n to print and highlight next generator point')
    print('  left to show next facet.  Highlighted green if good, red if not')
    print('  c to clear dynamic plot elements')
    print()


    input('press enter to quit\n')
